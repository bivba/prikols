{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from huggingface_hub import notebook_login\n\nnotebook_login()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:09:56.216104Z","iopub.execute_input":"2024-12-16T09:09:56.216456Z","iopub.status.idle":"2024-12-16T09:09:56.233449Z","shell.execute_reply.started":"2024-12-16T09:09:56.216427Z","shell.execute_reply":"2024-12-16T09:09:56.232436Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"52d3e3a2e6de4255bce103c3a8e2036b"}},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"%%capture\n\n!pip install faiss-gpu -q\n\n!pip install deep-translator -q\n\n!pip install langdetect -q\n\n!pip install pip3-autoremove\n!pip-autoremove torch torchvision torchaudio -y\n!pip uninstall -y torch torchvision torchaudio xformers\n!pip install torch torchvision torchaudio xformers --index-url https://download.pytorch.org/whl/cu121\n!pip install sentence_transformers peft\n\n!pip install unsloth\n# Also get the latest nightly Unsloth!\n!pip uninstall unsloth -y && pip install --upgrade --no-cache-dir --no-deps git+https://github.com/unslothai/unsloth.git","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:10:06.696640Z","iopub.execute_input":"2024-12-16T09:10:06.696973Z","iopub.status.idle":"2024-12-16T09:14:04.653784Z","shell.execute_reply.started":"2024-12-16T09:10:06.696941Z","shell.execute_reply":"2024-12-16T09:14:04.652641Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import torch\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport transformers\n\nfrom transformers import AutoModelForSeq2SeqLM, AutoTokenizer\n\nfrom sentence_transformers import SentenceTransformer\n\nimport faiss\n\nfrom torch.utils.data import Dataset, DataLoader\n\nimport torch.nn as nn\n\nfrom nltk import sent_tokenize\n\nimport nltk\n\nfrom deep_translator import GoogleTranslator\n\nfrom langdetect import detect\n\nimport pickle\n\nimport transformers\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig\n\nfrom peft import prepare_model_for_kbit_training\nfrom peft import LoraConfig, TaskType, get_peft_model\n\nfrom sklearn.model_selection import train_test_split\n\nfrom unsloth import FastLanguageModel\n\nimport json","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:14:04.655679Z","iopub.execute_input":"2024-12-16T09:14:04.655980Z","iopub.status.idle":"2024-12-16T09:14:24.369384Z","shell.execute_reply.started":"2024-12-16T09:14:04.655953Z","shell.execute_reply":"2024-12-16T09:14:24.368406Z"}},"outputs":[{"name":"stdout","text":"🦥 Unsloth: Will patch your computer to enable 2x faster free finetuning.\n🦥 Unsloth Zoo will now patch everything to make training faster!\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"!rm -rf prikols\n!git clone https://github.com/bivba/prikols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:14:24.370615Z","iopub.execute_input":"2024-12-16T09:14:24.370955Z","iopub.status.idle":"2024-12-16T09:14:28.816348Z","shell.execute_reply.started":"2024-12-16T09:14:24.370918Z","shell.execute_reply":"2024-12-16T09:14:28.815443Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Cloning into 'prikols'...\nremote: Enumerating objects: 47, done.\u001b[K\nremote: Counting objects: 100% (30/30), done.\u001b[K\nremote: Compressing objects: 100% (25/25), done.\u001b[K\nremote: Total 47 (delta 13), reused 14 (delta 5), pack-reused 17 (from 1)\u001b[K\nReceiving objects: 100% (47/47), 42.61 MiB | 32.13 MiB/s, done.\nResolving deltas: 100% (17/17), done.\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"token = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2', device='cuda')\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\n\n\nclient = GoogleTranslator(source='ru', target='en')\n\ntext = open('/kaggle/working/prikols/context.txt').read()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:17:27.853426Z","iopub.execute_input":"2024-12-16T09:17:27.853840Z","iopub.status.idle":"2024-12-16T09:17:32.142586Z","shell.execute_reply.started":"2024-12-16T09:17:27.853809Z","shell.execute_reply":"2024-12-16T09:17:32.141550Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e938641852a64e7b9ad01d8220eeae35"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e92687e22ce14930a34cfcbbbf741686"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/10.7k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b9dafb7f8ad24ad59a93a6e2871f076c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2927c0e0bc8f4f009ec91846355f05a5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e3ef682a4d12490cb37f821977c21766"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c2fe94c625e945d8862c2639e44e3115"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b7d9c484ab7d4f9fb3d0b9a0fa13c4a8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9992992c7e99436b9580eb8ff81bd218"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a05642a678f345c18bec61b8442a56c1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"955d45a7118a4b78b1415fdef0a368af"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"1_Pooling/config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fa25eb17c2e64832af9d7e868403786d"}},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"#model_name = \"unsloth/Meta-Llama-3.1-8B-bnb-4bit\"\n\ntorch.cuda.empty_cache()\n\nmax_seq_length = 2048\n\ndtype = None\n\nload_in_4bit = True\n\n\n\nmodel, tokenizer = FastLanguageModel.from_pretrained(\n\n    model_name = \"bivba/quant_4bit\",\n\n    max_seq_length = max_seq_length,\n\n    dtype = dtype,\n\n    load_in_4bit = load_in_4bit\n\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:17:36.203097Z","iopub.execute_input":"2024-12-16T09:17:36.203790Z","iopub.status.idle":"2024-12-16T09:22:14.274354Z","shell.execute_reply.started":"2024-12-16T09:17:36.203756Z","shell.execute_reply":"2024-12-16T09:22:14.273581Z"}},"outputs":[{"name":"stdout","text":"==((====))==  Unsloth 2024.12.4: Fast Qwen2 patching. Transformers:4.46.3.\n   \\\\   /|    GPU: Tesla T4. Max memory: 14.741 GB. Platform: Linux.\nO^O/ \\_/ \\    Torch: 2.5.1+cu121. CUDA: 7.5. CUDA Toolkit: 12.1. Triton: 3.1.0\n\\        /    Bfloat16 = FALSE. FA [Xformers = 0.0.28.post3. FA2 = False]\n \"-____-\"     Free Apache license: http://github.com/unslothai/unsloth\nUnsloth: Fast downloading is enabled - ignore downloading bars which are red colored!\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors.index.json:   0%|          | 0.00/210k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4c98b150f8aa40b5af60786f31a341f2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading shards:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d5541fb18ccf45b6884a1b9417587ea7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00001-of-00002.safetensors:   0%|          | 0.00/5.00G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c96aa7ce11d34862ac67a4e3272161d1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00002-of-00002.safetensors:   0%|          | 0.00/4.93G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b1bc5e7058374703b7cbfe48681e7eea"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bdd89e8bd8de4dce860019b48c9da93c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/167 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c61efcea5a8e49929286bc5f89da2ba5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/4.87k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"98736119040745d49e4628ac043240e7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/2.78M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6571de96013941f286a157b831bdcf9c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/1.67M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f847ed12b9cd47aea31e4b05d28f6bee"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"added_tokens.json:   0%|          | 0.00/632 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0e96d599dac049cab665557688ae9308"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/616 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"026dd76c4804485da0a7a5bf1b05ff1b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/7.03M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"24ce5f8801984a629cd5fa4175c408ba"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"adapter_model.safetensors:   0%|          | 0.00/275M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5d16f7abe0704d249472bf4bb092e01e"}},"metadata":{}},{"name":"stderr","text":"Unsloth 2024.12.4 patched 48 layers with 48 QKV layers, 48 O layers and 48 MLP layers.\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"nltk.download('punkt_tab')\n\ndef split_document(document, chunk_size=256, overlap=32):\n\n    sentences = sent_tokenize(document)\n\n    chunks = []\n\n    current_chunk = []\n\n    current_length = 0\n\n\n\n    for sentence in sentences:\n\n        sentence_length = len(sentence)\n\n        if current_length + sentence_length <= chunk_size:\n\n            current_chunk.append(sentence)\n\n            current_length += sentence_length\n\n        else:\n\n            chunks.append(\" \".join(current_chunk))\n\n            current_chunk = current_chunk[-overlap:] + [sentence]\n\n            current_length = sum(len(s) for s in current_chunk)\n\n\n\n    if current_chunk:\n\n        chunks.append(\" \".join(current_chunk))\n\n\n\n    return chunks","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:22:14.276430Z","iopub.execute_input":"2024-12-16T09:22:14.277143Z","iopub.status.idle":"2024-12-16T09:22:14.463996Z","shell.execute_reply.started":"2024-12-16T09:22:14.277100Z","shell.execute_reply":"2024-12-16T09:22:14.463217Z"}},"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package punkt_tab to /usr/share/nltk_data...\n[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"chunks = split_document(text)\n\nencoded = token.encode(chunks, return_numpy=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:22:14.464917Z","iopub.execute_input":"2024-12-16T09:22:14.465148Z","iopub.status.idle":"2024-12-16T09:23:13.809410Z","shell.execute_reply.started":"2024-12-16T09:22:14.465125Z","shell.execute_reply":"2024-12-16T09:23:13.808649Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/486 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a38b9df3fb4a4021ad3bdef5560cf107"}},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"faiss_index = faiss.read_index('prikols/context (1).faiss')\n\ndef find_context(query, k=3):\n\n  if detect(query) == 'ru':\n\n    query = client.translate(query)\n\n  q_emb = token.encode([query])\n\n  q_emb = q_emb.astype(np.float32)\n\n  _, indices = faiss_index.search(np.array(q_emb), k)\n\n  retrieved_chunks = [chunks[i] for i in indices[0]]\n\n  context = ' '.join(retrieved_chunks)\n\n  return context","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:23:57.252529Z","iopub.execute_input":"2024-12-16T09:23:57.252864Z","iopub.status.idle":"2024-12-16T09:23:57.281861Z","shell.execute_reply.started":"2024-12-16T09:23:57.252839Z","shell.execute_reply":"2024-12-16T09:23:57.280877Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"question_prompt = \"\"\"You are an AI assistaint helping with answering questions about quantum physics and quantum computer science. Below is a Question with a supportive context. Write a response that appropriately answers the request.\n\n\n\n### Question:\n\n{}\n\n\n\n### Context:\n\n{}\n\n\n\n### Answer:\n\n{}\"\"\"\n\n\n\nEOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN\n\ndef formatting_prompts_func(examples):\n\n    instructions = [client.translate(example) for example in examples['quesion']] if (all([detect(example) for example in examples['question']]) == 'ru') else examples['question']\n    inputs       = [find_context(instruction) for instruction in instructions]\n    outputs      = [client.translate(example) for example in examples['answer']] if (all([detect(example) for example in examples['answer']]) == 'ru') else examples['answer']\n\n    texts = []\n\n    for instruction, input, output in zip(instructions, inputs, outputs):\n\n        # Must add EOS_TOKEN, otherwise your generation will go on forever!\n\n        text = question_prompt.format(instruction, input, output) + EOS_TOKEN\n\n        texts.append(text)\n\n    return { \"text\" : texts, }\n\npass\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:25:09.611851Z","iopub.execute_input":"2024-12-16T09:25:09.612238Z","iopub.status.idle":"2024-12-16T09:25:09.619135Z","shell.execute_reply.started":"2024-12-16T09:25:09.612192Z","shell.execute_reply":"2024-12-16T09:25:09.618282Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"FastLanguageModel.for_inference(model) # Enable native 2x faster inference\n\ninputs = tokenizer(\n\n[\n\n    question_prompt.format(\n\n        client.translate(\" Кубит - это суперпозиция двух квантовых состояний $c_0|0> + c_1|1>$, где $c_1, c_2$ - комплексные числа. Сколько действительных параметров нужно задать, чтобы определить конкретный кубит. Выбери один из вариантов \\n 1) 2 \\n 2) 3 \\n 3) 1 \\n 4) 4 \\n\"), # instruction\n\n        find_context(\" Кубит - это суперпозиция двух квантовых состояний $c_0|0> + c_1|1>$, где $c_1, c_2$ - комплексные числа. Сколько действительных параметров нужно задать, чтобы определить конкретный кубит. \\\\\\\\\\n1) 2 \\\\\\\\\\n2) 3 \\\\\\\\\\n3) 1 \\\\\\\\\\n4) 4 \\\\\\\\\\n\"), # input\n\n        \"\", # output - leave this blank for generation!\n\n    )\n\n], return_tensors = \"pt\").to(\"cuda\")\n\n\n\noutputs = model.generate(**inputs, max_new_tokens = 128, use_cache = True, pad_token_id = tokenizer.eos_token_id)\n\ntokenizer.batch_decode(outputs)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:26:55.527484Z","iopub.execute_input":"2024-12-16T09:26:55.528402Z","iopub.status.idle":"2024-12-16T09:27:22.020581Z","shell.execute_reply.started":"2024-12-16T09:26:55.528368Z","shell.execute_reply":"2024-12-16T09:27:22.019758Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6b46a6fd9d41460eb4c1d26579ce063e"}},"metadata":{}},{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"[\"You are an AI assistaint helping with answering questions about quantum physics and quantum computer science. Below is a Question with a supportive context. Write a response that appropriately answers the request.\\n\\n\\n\\n### Question:\\n\\nA qubit is a superposition of two quantum states $c_0|0> + c_1|1>$, where $c_1, c_2$ are complex numbers. How many real parameters must be specified to define a specific qubit. Choose one of the options \\n1) 2 \\n2) 3 \\n3) 1 \\n4) 4\\n\\n\\n\\n### Context:\\n\\n[label=0., ref=0]\\n2. **General Two-Qubit States** In our system of two qubits, the state space is four-dimensional with basis states \\\\(\\\\ket{00}\\\\), \\\\(\\\\ket{01}\\\\), \\\\(\\\\ket{10}\\\\), and \\\\(\\\\ket{11}\\\\). This allows us to construct a general two-qubit state as a linear combination of these basis states: \\\\[\\\\ket{\\\\psi}=\\\\sum_{i,j\\\\in\\\\{0,1\\\\}}c_{ij}\\\\ket{ij}=c_{00}\\\\ket{00}+c_{01}\\\\ket{01}+c_ {10}\\\\ket{10}+c_{11}\\\\ket{11}.\\\\] (6.14)\\n\\nHere, \\\\(c_{ij}\\\\) are complex coefficients such that \\\\(\\\\sum|c_{ij}|^{2}=1\\\\). Therefore, a general state for a two-qubit system is a vector in the four-dimensional complex Hilbert space \\\\(\\\\mathbb{C}^{4}\\\\). 3. **Product States** The state \\\\(\\\\ket{\\\\psi_{AB}}\\\\equiv\\\\ket{\\\\psi_{A}}\\\\otimes\\\\ket{\\\\psi_{B}}\\\\) referred to in Eq. 6.12 is a specific instance known as a product state. A product state is defined as one where the state vector can be expressed as the tensor product of the state vectors of the individual qubits. It represents a system of independent qubits. 4. **Non-Product States** Apart from product states, there exist states that cannot be expressed as a tensor product of individual qubit states. An example of such a state is the Bell state, also known as an EPR pair: \\\\[\\\\ket{\\\\Phi^{+}}=\\\\frac{1}{\\\\sqrt{2}}(\\\\ket{00}+\\\\ket{11}).\\\\] (6.15) This state cannot be written as a tensor product of individual qubit states. Proof. : If we assume that \\\\(\\\\frac{1}{\\\\sqrt{2}}(|00\\\\rangle+|11\\\\rangle)\\\\) could be expressed by Eq. 6.12, we find that \\\\(\\\\alpha\\\\gamma=\\\\beta\\\\delta=\\\\frac{1}{\\\\sqrt{2}}\\\\) and \\\\(\\\\alpha\\\\delta=\\\\beta\\\\gamma=0\\\\). However, these two conditions are impossible to satisfy simultaneously. Non-product states like these exhibit entanglement, a unique quantum phenomenon where the state of one qubit is interconnected with the state of the other, which we will study extensively later. Exercise 6.2: Demonstrate that \\\\(|\\\\Psi^{-}\\\\rangle=\\\\frac{1}{\\\\sqrt{2}}(|01\\\\rangle-|10\\\\rangle)\\\\) is a non-product state. Exercise 6.3: Prove that \\\\(\\\\frac{1}{2}(|00\\\\rangle-|10\\\\rangle-|01\\\\rangle+|11\\\\rangle)\\\\) is a product state and identify the two component states. ### 6.2 Measurements of Two-Qubit Systems\\n\\nWe introduced a broad framework for quantum measurement in SS 3.4. This section delves deeper by extending this framework to encompass the measurements of composite quantum systems, specifically those involving multiple qubits. To provide a clear perspective, we will primarily focus on a composite quantum system comprising two subsystems, \\\\(A\\\\) and \\\\(B\\\\). However, it's essential to note that the principles we discuss are readily extendable to more intricate systems consisting of multiple subsystems. These subsystems can be formed by qubits or other advanced quantum particles. When addressing the measurements of such composite systems, the tensor product structure of the state space becomes crucial, as do potential correlations between the subsystems. In the subsequent sections, we will elucidate the two predominant types of quantum measurements suited for these composite systems. #### Local Measurements on Subsystems\\n\\nIn quantum mechanics, a local measurement refers to a measurement performed on one subsystem of a composite system, leaving the other subsystem(s) physically undisturbed. The measurement operation applies only to the subsystem of interest, and the outcome pertains solely to the state of this subsystem. For a composite system composed of subsystems \\\\(A\\\\) and \\\\(B\\\\), the local measurement operators for a measurement on subsystem \\\\(A\\\\) or \\\\(B\\\\) can be expressed as \\\\(M_{i}\\\\otimes I_{B}\\\\) and \\\\(I_{A}\\\\otimes M_{i}\\\\) respectively, where \\\\(M_{i}\\\\) represents the measurement operators of the subsystem in focus and \\\\(I_{A}\\\\) and \\\\(I_{B}\\\\) are identity operators on subsystems \\\\(A\\\\) and \\\\(B\\\\). The sequence in which local measurements are made is not essential, as each measurement operates independently on its respective subsystem. Mathematically, \\\\(M_{i}\\\\otimes I_{B}\\\\) and \\\\(I_{A}\\\\otimes M_{i}\\\\) commute. The primary aim of local measurements is to uncover properties of the individual subsystem. Entangled States\\n\\nFor entangled states, the state of the composite system cannot be fully describedby the states of its individual subsystems. **General Two-Qubit States** In our system of two qubits, the state space is four-dimensional with basis states \\\\(\\\\ket{00}\\\\), \\\\(\\\\ket{01}\\\\), \\\\(\\\\ket{10}\\\\), and \\\\(\\\\ket{11}\\\\). This allows us to construct a general two-qubit state as a linear combination of these basis states: \\\\[\\\\ket{\\\\psi}=\\\\sum_{i,j\\\\in\\\\{0,1\\\\}}c_{ij}\\\\ket{ij}=c_{00}\\\\ket{00}+c_{01}\\\\ket{01}+c_ {10}\\\\ket{10}+c_{11}\\\\ket{11}.\\\\] (6.14)\\n\\nHere, \\\\(c_{ij}\\\\) are complex coefficients such that \\\\(\\\\sum|c_{ij}|^{2}=1\\\\). Therefore, a general state for a two-qubit system is a vector in the four-dimensional complex Hilbert space \\\\(\\\\mathbb{C}^{4}\\\\). 3. **Product States** The state \\\\(\\\\ket{\\\\psi_{AB}}\\\\equiv\\\\ket{\\\\psi_{A}}\\\\otimes\\\\ket{\\\\psi_{B}}\\\\) referred to in Eq. 6.12 is a specific instance known as a product state. A product state is defined as one where the state vector can be expressed as the tensor product of the state vectors of the individual qubits. It represents a system of independent qubits. 4. **Non-Product States** Apart from product states, there exist states that cannot be expressed as a tensor product of individual qubit states. An example of such a state is the Bell state, also known as an EPR pair: \\\\[\\\\ket{\\\\Phi^{+}}=\\\\frac{1}{\\\\sqrt{2}}(\\\\ket{00}+\\\\ket{11}).\\\\] (6.15) This state cannot be written as a tensor product of individual qubit states. Proof. : If we assume that \\\\(\\\\frac{1}{\\\\sqrt{2}}(|00\\\\rangle+|11\\\\rangle)\\\\) could be expressed by Eq. 6.12, we find that \\\\(\\\\alpha\\\\gamma=\\\\beta\\\\delta=\\\\frac{1}{\\\\sqrt{2}}\\\\) and \\\\(\\\\alpha\\\\delta=\\\\beta\\\\gamma=0\\\\). However, these two conditions are impossible to satisfy simultaneously. Non-product states like these exhibit entanglement, a unique quantum phenomenon where the state of one qubit is interconnected with the state of the other, which we will study extensively later. Exercise 6.2: Demonstrate that \\\\(|\\\\Psi^{-}\\\\rangle=\\\\frac{1}{\\\\sqrt{2}}(|01\\\\rangle-|10\\\\rangle)\\\\) is a non-product state. Exercise 6.3: Prove that \\\\(\\\\frac{1}{2}(|00\\\\rangle-|10\\\\rangle-|01\\\\rangle+|11\\\\rangle)\\\\) is a product state and identify the two component states. ### 6.2 Measurements of Two-Qubit Systems\\n\\nWe introduced a broad framework for quantum measurement in SS 3.4. This section delves deeper by extending this framework to encompass the measurements of composite quantum systems, specifically those involving multiple qubits. To provide a clear perspective, we will primarily focus on a composite quantum system comprising two subsystems, \\\\(A\\\\) and \\\\(B\\\\). However, it's essential to note that the principles we discuss are readily extendable to more intricate systems consisting of multiple subsystems. These subsystems can be formed by qubits or other advanced quantum particles. When addressing the measurements of such composite systems, the tensor product structure of the state space becomes crucial, as do potential correlations between the subsystems. In the subsequent sections, we will elucidate the two predominant types of quantum measurements suited for these composite systems. #### Local Measurements on Subsystems\\n\\nIn quantum mechanics, a local measurement refers to a measurement performed on one subsystem of a composite system, leaving the other subsystem(s) physically undisturbed. The measurement operation applies only to the subsystem of interest, and the outcome pertains solely to the state of this subsystem. For a composite system composed of subsystems \\\\(A\\\\) and \\\\(B\\\\), the local measurement operators for a measurement on subsystem \\\\(A\\\\) or \\\\(B\\\\) can be expressed as \\\\(M_{i}\\\\otimes I_{B}\\\\) and \\\\(I_{A}\\\\otimes M_{i}\\\\) respectively, where \\\\(M_{i}\\\\) represents the measurement operators of the subsystem in focus and \\\\(I_{A}\\\\) and \\\\(I_{B}\\\\) are identity operators on subsystems \\\\(A\\\\) and \\\\(B\\\\). The sequence in which local measurements are made is not essential, as each measurement operates independently on its respective subsystem. Mathematically, \\\\(M_{i}\\\\otimes I_{B}\\\\) and \\\\(I_{A}\\\\otimes M_{i}\\\\) commute. The primary aim of local measurements is to uncover properties of the individual subsystem. Entangled States\\n\\nFor entangled states, the state of the composite system cannot be fully describedby the states of its individual subsystems. When a measurement is made on one subsystem of an entangled pair, our description of the overall system, and hence of the other subsystem, must be updated. #### General States vs. Product States\\n\\n1. [label=0., ref=0]\\n2. **General Two-Qubit States** In our system of two qubits, the state space is four-dimensional with basis states \\\\(\\\\ket{00}\\\\), \\\\(\\\\ket{01}\\\\), \\\\(\\\\ket{10}\\\\), and \\\\(\\\\ket{11}\\\\). This allows us to construct a general two-qubit state as a linear combination of these basis states: \\\\[\\\\ket{\\\\psi}=\\\\sum_{i,j\\\\in\\\\{0,1\\\\}}c_{ij}\\\\ket{ij}=c_{00}\\\\ket{00}+c_{01}\\\\ket{01}+c_ {10}\\\\ket{10}+c_{11}\\\\ket{11}.\\\\] (6.14)\\n\\nHere, \\\\(c_{ij}\\\\) are complex coefficients such that \\\\(\\\\sum|c_{ij}|^{2}=1\\\\). Therefore, a general state for a two-qubit system is a vector in the four-dimensional complex Hilbert space \\\\(\\\\mathbb{C}^{4}\\\\). 3. **Product States** The state \\\\(\\\\ket{\\\\psi_{AB}}\\\\equiv\\\\ket{\\\\psi_{A}}\\\\otimes\\\\ket{\\\\psi_{B}}\\\\) referred to in Eq. 6.12 is a specific instance known as a product state. A product state is defined as one where the state vector can be expressed as the tensor product of the state vectors of the individual qubits. It represents a system of independent qubits. 4. **Non-Product States** Apart from product states, there exist states that cannot be expressed as a tensor product of individual qubit states. An example of such a state is the Bell state, also known as an EPR pair: \\\\[\\\\ket{\\\\Phi^{+}}=\\\\frac{1}{\\\\sqrt{2}}(\\\\ket{00}+\\\\ket{11}).\\\\] (6.15) This state cannot be written as a tensor product of individual qubit states. Proof. : If we assume that \\\\(\\\\frac{1}{\\\\sqrt{2}}(|00\\\\rangle+|11\\\\rangle)\\\\) could be expressed by Eq. 6.12, we find that \\\\(\\\\alpha\\\\gamma=\\\\beta\\\\delta=\\\\frac{1}{\\\\sqrt{2}}\\\\) and \\\\(\\\\alpha\\\\delta=\\\\beta\\\\gamma=0\\\\). However, these two conditions are impossible to satisfy simultaneously. Non-product states like these exhibit entanglement, a unique quantum phenomenon where the state of one qubit is interconnected with the state of the other, which we will study extensively later. Exercise 6.2: Demonstrate that \\\\(|\\\\Psi^{-}\\\\rangle=\\\\frac{1}{\\\\sqrt{2}}(|01\\\\rangle-|10\\\\rangle)\\\\) is a non-product state. Exercise 6.3: Prove that \\\\(\\\\frac{1}{2}(|00\\\\rangle-|10\\\\rangle-|01\\\\rangle+|11\\\\rangle)\\\\) is a product state and identify the two component states. ### 6.2 Measurements of Two-Qubit Systems\\n\\nWe introduced a broad framework for quantum measurement in SS 3.4. This section delves deeper by extending this framework to encompass the measurements of composite quantum systems, specifically those involving multiple qubits. To provide a clear perspective, we will primarily focus on a composite quantum system comprising two subsystems, \\\\(A\\\\) and \\\\(B\\\\). However, it's essential to note that the principles we discuss are readily extendable to more intricate systems consisting of multiple subsystems. These subsystems can be formed by qubits or other advanced quantum particles. When addressing the measurements of such composite systems, the tensor product structure of the state space becomes crucial, as do potential correlations between the subsystems. In the subsequent sections, we will elucidate the two predominant types of quantum measurements suited for these composite systems. #### Local Measurements on Subsystems\\n\\nIn quantum mechanics, a local measurement refers to a measurement performed on one subsystem of a composite system, leaving the other subsystem(s) physically undisturbed. The measurement operation applies only to the subsystem of interest, and the outcome pertains solely to the state of this subsystem. For a composite system composed of subsystems \\\\(A\\\\) and \\\\(B\\\\), the local measurement operators for a measurement on subsystem \\\\(A\\\\) or \\\\(B\\\\) can be expressed as \\\\(M_{i}\\\\otimes I_{B}\\\\) and \\\\(I_{A}\\\\otimes M_{i}\\\\) respectively, where \\\\(M_{i}\\\\) represents the measurement operators of the subsystem in focus and \\\\(I_{A}\\\\) and \\\\(I_{B}\\\\) are identity operators on subsystems \\\\(A\\\\) and \\\\(B\\\\). The sequence in which local measurements are made is not essential, as each measurement operates independently on its respective subsystem. Mathematically, \\\\(M_{i}\\\\otimes I_{B}\\\\) and \\\\(I_{A}\\\\otimes M_{i}\\\\) commute.\\n\\n\\n\\n### Answer:\\n\\nThe state of a qubit is a superposition of two quantum states \\\\(c_0|0> + c_1|1>\\\\), where \\\\(c_1, c_2\\\\) are complex numbers. Since complex numbers have two real parameters (the real and imaginary parts), two real parameters are needed to specify each of \\\\(c_0\\\\) and \\\\(c_1\\\\). Therefore, the total number of real parameters needed to define a specific qubit state is \\\\(2+2=4\\\\). The correct answer is 4. ### Question:\\n\\nWhat is the significance of the Bell basis in quantum computing and how does it\"]"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}